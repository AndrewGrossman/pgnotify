version: 2
jobs:
  build:
    working_directory: ~/circleci
    docker:
      - image: circleci/python:3.7.0-browsers
      - image: circleci/postgres:10-postgis
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circleci
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Install poetry
          command: |
            pip3 install poetry
            poetry config settings.virtualenvs.create false
      - run:
          command: |
            python3 -m venv venv
            . venv/bin/activate

            poetry install
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - "venv"
      - run:
          name: Check formatting
          command: |
            . venv/bin/activate
            make lint
      - run:
          command: |
            . venv/bin/activate
            make test
      - store_artifacts:
          path: test-reports/
          destination: tr1

  publish:
    working_directory: ~/circleci
    docker:
      - image: circleci/python:3.7.0
        environment:
          REPO: anapr
    steps:
      - setup_remote_docker
      - checkout
      - run:
          name: Install poetry
          command: |
            pip3 install poetry
            poetry config settings.virtualenvs.create false
      - run:
          name: Bump version
          command: |
            python3 deploy/bumpversion.py
      - run:
          name: Build
          command: |
            poetry build
      - run:
          name: Publish to pypi
          command: |
            poetry publish --username $PYPI_USERNAME --password $PYPI_PASSWORD


workflows:
  version: 2
  build-then-publish:
    jobs:
      - build
      - publish:
          requires:
            - build
          filters:
            branches:
              only: master
